import processing.serial.*;

Serial myPort;  // Create object from Serial class
int val;      // Data received from the serial port

boolean clicked;

color c_gray =#B2B2B2;
color c_red =#FF0000;
color c_green =#00FF00;

Button b1, b2;
LED led1, led2;
HScrollbar hs1;

void setup() 
{
  size(640, 480);
  background(255);             // Set background to white
  
  //String portName = Serial.list()[0];
  //myPort = new Serial(this, portName, 9600);
  
  
  b1 = new Button(50,50,100,50,"1");
  b2 = new Button(50,150,100,50,"2");
  led1 = new LED(200,75, 50, c_gray);
  led2 = new LED(200,175, 50, c_gray);
  
  b1.update();
  b2.update();
  led1.update();
  led2.update();
  
  hs1 = new HScrollbar(0, 300, 639, 50, 3*5+1);
}



void draw()
{
background(255);             // Set background to white - !!!!! cleans screen

// buttons and LEDs
b1.update();
b2.update();

      if(b1.clicked)
      {
        if (clicked) clicked = false;
        else clicked = true;
      }
      
      if(clicked)
      {
        led1.update(c_green);
      }
      else
      {
        led1.update(c_red);
      }


if(b2.clicked)
{
  if(led2.getColor() == c_green)
 {
   led2.update(c_red);
 }
 else
 {
   led2.update(c_green);
 }
}


led1.update();
led2.update();



// horizontal scroll
  hs1.update();
  hs1.display();
fill(0);
text( (int)hs1.getPos(), 10,300);

}





//=====================================================================================
class LED{
  int xpos, ypos, diameter;
  color colour = #B2B2B2;
  LED(
  int tx, int ty,
  int td,
  int tcolour
  ){
    xpos = tx;
    ypos = ty;
    diameter = td;
    colour = tcolour;
  }

    void update(){
    //draw circle
    fill(colour);
    stroke(0);
    ellipse(xpos, ypos, diameter, diameter);
  } 
  
    void update(color c){
    //draw circle
    colour = c;
    fill(colour);
    stroke(0);
    ellipse(xpos, ypos, diameter, diameter);
  } 
  
  color getColor()
  {
    return colour;
  }
  
  
  
}


//=====================================================================================
class Button{
  int xpos, ypos, wid, hei;
  String label;
  boolean over = false;
  boolean down = false; 
  boolean clicked = false;
  Button(
  int tx, int ty,
  int tw, int th,
  String tlabel
  ){
    xpos = tx;
    ypos = ty;
    wid = tw;
    hei = th;
    label = tlabel;
  }
  
  void update(){
    //it is important that this comes first
    if(down&&over&&!mousePressed){
      clicked=true;
    }else{
      clicked=false;
    }
    
    //UP OVER AND DOWN STATE CONTROLS
    if(mouseX>xpos && mouseY>ypos && mouseX<xpos+wid && mouseY<ypos+hei){
      over=true;
      if(mousePressed){
        down=true;
      }else{
        down=false;
      }
    }else{
      over=false;
    }
    smooth();
    
    //box color controls
    if(!over){
      fill(255);
    }else{
      if(!down){
        fill(100);
      }else{
        fill(0);
      }
    }
    stroke(0);
    rect(xpos, ypos, wid, hei, 10);//draws the rectangle, the last param is the round corners
    
    //Text Color Controls
    if(down){
      fill(255);
    }else{    
      fill(0);
    }
    textSize(20); 
    text(label, xpos+wid/2-(textWidth(label)/2), ypos+hei/2+(textAscent()/2)); 
    //all of this just centers the text in the box
  } 
}
    
//=====================================================================================
class HScrollbar
{
  int swidth, sheight;    // width and height of bar
  int xpos, ypos;         // x and y position of bar
  float spos, newspos;    // x position of slider
  int sposMin, sposMax;   // max and min values of slider
  int loose;              // how loose/heavy
  boolean over;           // is the mouse over the slider?
  boolean locked;
  float ratio;

  HScrollbar (int xp, int yp, int sw, int sh, int l) {
    swidth = sw;
    sheight = sh;
    int widthtoheight = sw - sh;
    ratio = (float)sw / (float)widthtoheight;
    xpos = xp;
    ypos = yp-sheight/2;
    spos = xpos + swidth/2 - sheight/2;
    newspos = spos;
    sposMin = xpos;
    sposMax = xpos + swidth - sheight;
    loose = l;
  }

  void update() {
    if(over()) {
      over = true;
    } else {
      over = false;
    }
    if(mousePressed && over) {
      locked = true;
    }
    if(!mousePressed) {
      locked = false;
    }
    if(locked) {
      newspos = constrain(mouseX-sheight/2, sposMin, sposMax);
    }
    if(abs(newspos - spos) > 1) {
      spos = spos + (newspos-spos)/loose;
    }
  }

  int constrain(int val, int minv, int maxv) {
    return min(max(val, minv), maxv);
  }

  boolean over() {
    if(mouseX > xpos && mouseX < xpos+swidth &&
    mouseY > ypos && mouseY < ypos+sheight) {
      return true;
    } else {
      return false;
    }
  }

  void display() {
    fill(255);
    rect(xpos, ypos, swidth, sheight);
    if(over || locked) {
      fill(153, 102, 0);
    } else {
      fill(102, 102, 102);
    }
    rect(spos, ypos, sheight, sheight);
  }

  float getPos() {
    // Convert spos to be values between
    // 0 and the total width of the scrollbar
    return spos * ratio;
  }
}
